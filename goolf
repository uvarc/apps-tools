#!/bin/bash
# goolf toolchain (*) steps:
# 0. openmpi with gcc *
# 1. gompi toolchain
# 2. openblas with gcc *
# 3. scalapack with gompi *
# 4. fftw with gcc
# 5. fftw with gompi *
# 6. goolf toolchain *
#
# Ruoshi Sun
# 2021-09-30

GCC_VER=11.2.0
OPENMPI_VER=3.1.6
OPENBLAS_VER=0.3.17
SCALAPACK_VER=2.1.0
FFTW_VER=3.3.10

# toolchain version
GOMPI_VER=${GCC_VER}_${OPENMPI_VER}
GOOLF_VER=${GCC_VER}_${OPENMPI_VER}

# easyconfig filename
EB_OPENMPI="openmpi-${OPENMPI_VER}-gcc-${GCC_VER}.eb"
EB_GOMPI="gompi-${GOMPI_VER}.eb"
EB_OPENBLAS="openblas-${OPENBLAS_VER}-gcc-${GCC_VER}.eb"
EB_SCALAPACK="scalapack-${SCALAPACK_VER}-gompi-${GOMPI_VER}.eb"
EB_FFTW_GCC="fftw-${FFTW_VER}-gcc-${GCC_VER}.eb"
EB_FFTW="fftw-${FFTW_VER}-gompi-${GOMPI_VER}.eb"
EB_GOOLF="goolf-${GOOLF_VER}.eb"

DATE=$(date +%Y-%m-%d)
EB_HEADER="# $DATE generated by goolf script (Ruoshi Sun)"

# temporary file for appsync commands
APPSYNC_FILE="$(mktemp)"
APPSYNC=(
    "compiler gcc/$GCC_VER openmpi/$OPENMPI_VER"
    "toolchains gompi/$GOMPI_VER"
    "compiler gcc/$GCC_VER openblas/$OPENBLAS_VER"
    "mpi gcc/$GCC_VER openmpi/$OPENMPI_VER scalapack/$SCALAPACK_VER"
    "compiler gcc/$GCC_VER fftw/$FFTW_VER"
    "mpi gcc/$GCC_VER openmpi/$OPENMPI_VER fftw/$FFTW_VER"
    "toolchains goolf/$GOOLF_VER"
)

echo "${APPSYNC[@]}"
exit
# menu and prompt
MESSAGE=(
    "openmpi/$OPENMPI_VER with gcc/$GCC_VER"
    "gompi/$GOMPI_VER toolchain"
    "openblas/$OPENBLAS_VER with gcc/$GCC_VER"
    "scalapack/$SCALAPACK_VER with gompi/$GOMPI_VER"
    "fftw/$FFTW_VER with gcc/$GCC_VER"
    "fftw/$FFTW_VER with gompi/$GOMPI_VER"
    "goolf/$GOOLF_VER toolchain"
)

echo "   <G>cc"
echo "   <O>penmpi"
echo "   <O>penblas"
echo "sca<L>apack"
echo "   <F>ftw      automatic installation (Ruoshi Sun)"
echo

for i in "${!MESSAGE[@]}"; do 
    echo "$i. ${MESSAGE[$i]}"
done
echo

read -p "Select initial step [0-6]: " step
if ! [[ "$step" =~ ^[0-6]$ ]]; then
    echo "Invalid option."
    exit 1
fi

#----------------------------------------- 
# begin installation

module purge
module load easybuild

# 0. openmpi with gcc
if [ $step -eq 0 ]; then
    cat > $EB_OPENMPI <<EOF
$EB_HEADER
easyblock = 'ConfigureMake'

name = 'openmpi'
version = '$OPENMPI_VER'

homepage = 'https://www.open-mpi.org/'
description = "The Open MPI Project is an open source MPI-3 implementation."

toolchain = {'name': 'gcc', 'version': '$GCC_VER'}

source_urls = ['https://download.open-mpi.org/release/open-mpi/v%(version_major_minor)s']
sources = [SOURCELOWER_TAR_GZ]

# needed for --with-verbs
osdependencies = [('zlib',)]

configopts = "--enable-shared --with-verbs --enable-mpirun-prefix-by-default --with-slurm --with-pmi=/opt/slurm/current --with-pmi-libdir=/opt/slurm/current/lib"

modextravars = {'SLURM_CPU_BIND_TYPE': 'cores', 'SLURM_MPI_TYPE': 'pmi2'}

sanity_check_paths = {
    'files': ['bin/ompi_info', 'bin/opal_wrapper', 'bin/orterun', 'lib/libmpi_mpifh.so', 'lib/libmpi.so', 'lib/libompitrace.so', 'lib/libopen-pal.so', 'lib/libopen-rte.so', 'include/mpi-ext.h', 'include/mpif-config.h', 'include/mpif.h', 'include/mpi.h', 'include/mpi_portable_platform.h'],
    'dirs': [],
}

moduleclass = 'mpi'
EOF

    eb -f $EB_OPENMPI
fi

# 1. gompi toolchain
if [ $step -le 1 ]; then
    cat > $EB_GOMPI <<EOF
$EB_HEADER
easyblock = 'Toolchain'

name = 'gompi'

gccver  = '$GCC_VER'
mpiver = '$OPENMPI_VER'

version = '%s_%s' % (gccver, mpiver)

homepage = '(none)'
description = """GNU Compiler Collection (GCC) based compiler toolchain along with CUDA toolkit,
 including OpenMPI for MPI support."""

toolchain = {'name': 'dummy', 'version': ''}

comp = ('gcc', gccver)

dependencies = [
    comp,
    ('openmpi', mpiver, '', comp),
]

moduleclass = 'toolchain'
EOF
    eb -f $EB_GOMPI
fi


# 2. openblas with gcc
if [ $step -le 2 ]; then
    cat > $EB_OPENBLAS <<EOF
$EB_HEADER
easyblock = 'ConfigureMake'

name = 'openblas'
version = '$OPENBLAS_VER'

homepage = 'http://xianyi.github.com/OpenBLAS/'
description = "OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version."

toolchain = {'name': 'gcc', 'version': '$GCC_VER'}

source_urls = [
    'http://www.netlib.org/lapack/timing/',
    'https://github.com/xianyi/OpenBLAS/archive/',
]
sources = ['v%(version)s.tar.gz']

patches = [
    ('large.tgz', '.'),
    ('timing.tgz', '.'),
]

buildopts = 'TARGET=SANDYBRIDGE DYNAMIC_ARCH=1 BINARY=64 USE_THREAD=0 CC="\$CC" FC="\$F77" NO_AFFINITY=1'
installopts = 'USE_THREAD=0 PREFIX=%(installdir)s'

skipsteps = ['configure']

sanity_check_paths = {
    'files': ['include/cblas.h', 'include/f77blas.h', 'include/lapacke_config.h', 'include/lapacke.h', 'include/lapacke_mangling.h', 'include/lapacke_utils.h', 'include/openblas_config.h', 'lib/libopenblas.a', 'lib/libopenblas.so'],
    'dirs': [],
}

moduleclass = 'numlib'
EOF

    eb -f $EB_OPENBLAS
fi

# 3. scalapack with gompi
if [ $step -le 3 ]; then
    cat > $EB_SCALAPACK <<EOF
$EB_HEADER
easyblock = 'EB_ScaLAPACK'

name = 'scalapack'
version = '$SCALAPACK_VER'

homepage = 'http://www.netlib.org/scalapack/'
description = """The ScaLAPACK (or Scalable LAPACK) library includes a subset of LAPACK routines
 redesigned for distributed memory MIMD parallel computers."""

gccver = '$GCC_VER'
mpiver = '$OPENMPI_VER'

toolchain = {'name': 'gompi', 'version': '%s_%s' % (gccver, mpiver)}
toolchainopts = {'pic': True, 'usempi': True}

source_urls = [homepage]
sources = [SOURCELOWER_TGZ]

blaslib = 'openblas'
blasver = '$OPENBLAS_VER'
 
dependencies = [
	(blaslib, blasver, '', ('gcc', gccver)),
]

preconfigopts = [
    'FCFLAGS="\$FCFLAGS -fallow-argument-mismatch" && '
]

# parallel build tends to fail, so disabling it
parallel = 1

moduleclass = 'numlib'
EOF

    eb -f $EB_SCALAPACK
fi

# 4. fftw with gcc
if [ $step -le 4 ]; then
    cat > $EB_FFTW_GCC <<EOF
$EB_HEADER
easyblock = 'ConfigureMake'

name = 'fftw'
#modaltsoftname = 'fftw'
version = '$FFTW_VER'

homepage = 'http://www.fftw.org'
description = """FFTW is a C subroutine library for computing the discrete Fourier transform (DFT)
 in one or more dimensions, of arbitrary input size, and of both real and complex data."""

toolchain = {'name': 'gcc', 'version': '$GCC_VER'}
toolchainopts = {'optarch': True, 'pic': True}

source_urls = [homepage]
sources = ['%(name)s-%(version)s.tar.gz']

common_configopts = "--enable-threads --enable-openmp --enable-shared --with-pic"

configopts = [
    common_configopts + " --enable-single --enable-avx ",
    common_configopts + " --enable-long-double ",
    common_configopts + " --enable-quad-precision",
    common_configopts + " --enable-avx ",  # default as last
]


moduleclass = 'numlib'
EOF

    eb -f $EB_FFTW_GCC
fi

# 5. fftw with gompi
if [ $step -le 5 ]; then
    cat > $EB_FFTW <<EOF
$EB_HEADER
easyblock = 'ConfigureMake'

name = 'fftw'
version = '$FFTW_VER'

homepage = 'http://www.fftw.org'
description = """FFTW is a C subroutine library for computing the discrete Fourier transform (DFT)
 in one or more dimensions, of arbitrary input size, and of both real and complex data."""

toolchain = {'name': 'gompi', 'version': '$GOMPI_VER'}
toolchainopts = {'optarch': True, 'usempi': True, 'pic': True}

source_urls = [homepage]
#sources = [SOURCELOWER_TAR_GZ]
sources = ['%(name)s-%(version)s.tar.gz']

common_configopts = "--enable-threads --enable-openmp --enable-shared --with-pic"

configopts = [
    common_configopts + " --enable-single --enable-avx --enable-mpi",
    common_configopts + " --enable-long-double --enable-mpi",
    common_configopts + " --enable-quad-precision",
    common_configopts + " --enable-avx --enable-mpi",  # default as last
]

moduleclass = 'numlib'
EOF

    eb -f $EB_FFTW
fi

# 6. goolf
if [ $step -le 6 ]; then
    cat > $EB_GOOLF <<EOF
$EB_HEADER
easyblock = 'Toolchain'

name = 'goolf'

gccver  = '$GCC_VER'
mpiver = '$OPENMPI_VER'

version = '%s_%s' % (gccver,mpiver)

homepage = '(none)'
description = """GNU Compiler Collection (GCC) based compiler toolchain,
 including OpenMPI for MPI support, OpenBLAS (BLAS and LAPACK support), FFTW and ScaLAPACK."""

toolchain = {'name': 'dummy', 'version': 'dummy'}

comp     = ('gcc',    gccver)
gompi_tc = ('gompi',  '%s_%s' % (gccver, mpiver))

# compiler toolchain dependencies
dependencies = [
    comp,
    ('openmpi',   mpiver,           '', comp),
    ('openblas',  '$OPENBLAS_VER',  '', comp),
    ('scalapack', '$SCALAPACK_VER', '', gompi_tc),
    ('fftw',      '$FFTW_VER',      '', gompi_tc),
]

moduleclass = 'toolchain'
EOF

    eb -f $EB_GOOLF
fi

#----------------------------------------- 
# write appsync commands

YYYYMM_SRC=`ls -l /apps | awk -F'/' '{print $NF}'`
YYYYMM_DEST=${YYYYMM_SRC/_build/}

cat > $APPSYNC_FILE <<EOF
for i in $YYYYMM_DEST; do
EOF

for i in "${!APPSYNC[@]}"; do 
    if [ $i -ge $step ]; then
        echo "    appsync $YYYYMM_DEST \$i ${APPSYNC[$i]}" >>$APPSYNC_FILE
    fi
done

echo "done" >>$APPSYNC_FILE
chmod +x $APPSYNC_FILE

echo
echo "appsync commands in $APPSYNC_FILE"
cat $APPSYNC_FILE
