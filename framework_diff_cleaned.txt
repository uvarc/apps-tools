diff --git a/home/uvacse/git/easybuild-framework/easybuild/framework/easyblock.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/framework/easyblock.py
index 3d09524..ce9b251 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/framework/easyblock.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/framework/easyblock.py
@@ -1916,9 +1916,11 @@ class EasyBlock(object):
             self.toolchain.reset()
 
         # prepare toolchain: load toolchain module and dependencies, set up build environment
+        self.log.debug("prepare toolchain...")
         self.toolchain.prepare(self.cfg['onlytcmod'], deps=self.cfg.dependencies(), silent=self.silent,
                                rpath_filter_dirs=self.rpath_filter_dirs, rpath_include_dirs=self.rpath_include_dirs)
-
+        self.log.debug("prepare toolchain - Done.")
+   
         # keep track of environment variables that were tweaked and need to be restored after environment got reset
         # $TMPDIR may be tweaked for OpenMPI 2.x, which doesn't like long $TMPDIR paths...
         self.tweaked_env_vars = {}

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/clanggcc.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/clanggcc.py
index 91bcfe2..0cf519d 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/clanggcc.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/clanggcc.py
@@ -37,12 +37,12 @@ from easybuild.toolchains.compiler.gcc import Gcc
 from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 
-TC_CONSTANT_CLANGGCC = "ClangGCC"
+TC_CONSTANT_CLANGGCC = "clanggcc"
 
 
 class ClangGcc(Clang, Gcc):
     """Compiler toolchain with Clang and GFortran compilers."""
-    NAME = 'ClangGCC'
-    COMPILER_MODULE_NAME = ['Clang', 'GCC']
+    NAME = 'clanggcc'
+    COMPILER_MODULE_NAME = ['clang', 'gcc']
     COMPILER_FAMILY = TC_CONSTANT_CLANGGCC
     SUBTOOLCHAIN = DUMMY_TOOLCHAIN_NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/clang.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/clang.py
index a35b59e..0c7b99f 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/clang.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/clang.py
@@ -36,13 +36,13 @@ from easybuild.tools.build_log import EasyBuildError
 from easybuild.tools.toolchain.compiler import Compiler
 
 
-TC_CONSTANT_CLANG = "Clang"
+TC_CONSTANT_CLANG = "clang"
 
 
 class Clang(Compiler):
     """Clang compiler class"""
 
-    COMPILER_MODULE_NAME = ['Clang']
+    COMPILER_MODULE_NAME = ['clang']
     
     COMPILER_FAMILY = TC_CONSTANT_CLANG
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/cuda.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/cuda.py
index 5f493c5..d42735c 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/cuda.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/cuda.py
@@ -35,13 +35,13 @@ from easybuild.tools.toolchain.compiler import Compiler
 from easybuild.tools.toolchain.variables import FlagList
 
 
-TC_CONSTANT_CUDA = "CUDA"
+TC_CONSTANT_CUDA = "cuda"
 
 
 class Cuda(Compiler):
     """CUDA compiler class."""
 
-    COMPILER_CUDA_MODULE_NAME = ['CUDA']
+    COMPILER_CUDA_MODULE_NAME = ['cuda']
     COMPILER_CUDA_FAMILY = TC_CONSTANT_CUDA
 
     COMPILER_CUDA_UNIQUE_OPTS = {
@@ -76,7 +76,7 @@ class Cuda(Compiler):
     def _set_compiler_vars(self):
         """Set the compiler variables"""
         # append lib dir paths to LDFLAGS (only if the paths are actually there)
-        root = self.get_software_root('CUDA')[0]
+        root = self.get_software_root('cuda')[0]
         self.variables.append_subdirs("LDFLAGS", root, subdirs=["lib64", "lib"])
         super(Cuda, self)._set_compiler_vars()
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/gcc.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/gcc.py
index ceaac6d..826735b 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/gcc.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/gcc.py
@@ -44,7 +44,7 @@ TC_CONSTANT_GCC = "GCC"
 class Gcc(Compiler):
     """GCC compiler class"""
 
-    COMPILER_MODULE_NAME = ['GCC']
+    COMPILER_MODULE_NAME = ['gcc']
 
     COMPILER_FAMILY = TC_CONSTANT_GCC
     COMPILER_UNIQUE_OPTS = {
@@ -114,11 +114,11 @@ class Gcc(Compiler):
         # append lib dir paths to LDFLAGS (only if the paths are actually there)
         # Note: hardcode 'GCC' here; we can not reuse COMPILER_MODULE_NAME because
         # it can be redefined by combining GCC with other compilers (e.g., Clang).
-        gcc_root = get_software_root('GCCcore')
+        gcc_root = get_software_root('gcccore')
         if gcc_root is None:
-            gcc_root = get_software_root('GCC')
+            gcc_root = get_software_root('gcc')
             if gcc_root is None:
-                raise EasyBuildError("Failed to determine software root for GCC")
+                raise EasyBuildError("Failed to determine software root for gcc")
 
         self.variables.append_subdirs("LDFLAGS", gcc_root, subdirs=["lib64", "lib"])
 
@@ -130,9 +130,9 @@ class Gcc(Compiler):
                                 (--optarch and --optarch=GENERIC still override this value)
         """
         if default_optarch is None and self.arch == systemtools.AARCH64:
-            gcc_version = get_software_version('GCCcore')
+            gcc_version = get_software_version('gcccore')
             if gcc_version is None:
-                gcc_version = get_software_version('GCC')
+                gcc_version = get_software_version('gcc')
                 if gcc_version is None:
                     raise EasyBuildError("Failed to determine software version for GCC")
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/inteliccifort.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/inteliccifort.py
index f6ab849..0e569d8 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/inteliccifort.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/inteliccifort.py
@@ -45,7 +45,7 @@ class IntelIccIfort(Compiler):
             should be done anyway (all icc versions come with matching ifort version)
     """
 
-    COMPILER_MODULE_NAME = ['icc', 'ifort']
+    COMPILER_MODULE_NAME = ['intel'] # ['icc', 'ifort']
 
     COMPILER_FAMILY = TC_CONSTANT_INTELCOMP
     COMPILER_UNIQUE_OPTS = {
@@ -108,19 +108,21 @@ class IntelIccIfort(Compiler):
         """Intel compilers-specific adjustments after setting compiler variables."""
         super(IntelIccIfort, self)._set_compiler_vars()
 
-        if not ('icc' in self.COMPILER_MODULE_NAME and 'ifort' in self.COMPILER_MODULE_NAME):
+        if not 'intel' in self.COMPILER_MODULE_NAME and not ('icc' in self.COMPILER_MODULE_NAME and 'ifort' in self.COMPILER_MODULE_NAME):
             raise EasyBuildError("_set_compiler_vars: missing icc and/or ifort from COMPILER_MODULE_NAME %s",
                                  self.COMPILER_MODULE_NAME)
 
-        icc_root, _ = self.get_software_root(self.COMPILER_MODULE_NAME)[0:2]
-        icc_version, ifort_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+        icc_root = self.get_software_root(self.COMPILER_MODULE_NAME)[0] # [0:2]
+        # icc_version, ifort_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+        icc_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0]
+        ifort_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0]
 
         if not ifort_version == icc_version:
             raise EasyBuildError("_set_compiler_vars: mismatch between icc version %s and ifort version %s",
                                  icc_version, ifort_version)
 
-        if LooseVersion(icc_version) < LooseVersion('2011'):
-            self.LIB_MULTITHREAD.insert(1, "guide")
+        #if LooseVersion(icc_version) < LooseVersion('2011'):
+        #    self.LIB_MULTITHREAD.insert(1, "guide")
 
         libpaths = ['intel64']
         if self.options.get('32bit', None):
@@ -134,7 +136,8 @@ class IntelIccIfort(Compiler):
     def set_variables(self):
         """Set the variables."""
         # -fopenmp is not supported in old versions (11.x)
-        icc_version, _ = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+        #icc_version, _ = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+        icc_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0]
         if LooseVersion(icc_version) < LooseVersion('12'):
             self.options.options_map['openmp'] = 'openmp'
 
diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/intelnompi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/intelnompi.py
new file mode 100644
index 0000000..b80ec7e
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/intelnompi.py
@@ -0,0 +1,141 @@
+##
+# Copyright 2012-2019 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# https://github.com/easybuilders/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+Support for Intel compilers (icc, ifort) as toolchain compilers.
+
+:author: Stijn De Weirdt (Ghent University)
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from distutils.version import LooseVersion
+
+import easybuild.tools.systemtools as systemtools
+from easybuild.tools.build_log import EasyBuildError
+from easybuild.tools.toolchain.compiler import Compiler
+
+
+TC_CONSTANT_INTELCOMP = "Intel"
+
+
+class IntelNoMPI(Compiler):
+    """Intel compiler class
+        - TODO: install as single package ?
+            should be done anyway (all icc versions come with matching ifort version)
+    """
+
+    COMPILER_MODULE_NAME = ['intel']
+
+    COMPILER_FAMILY = TC_CONSTANT_INTELCOMP
+    COMPILER_UNIQUE_OPTS = {
+        'intel-static': (False, "Link Intel provided libraries statically"),
+        'no-icc': (False, "Don't set Intel specific macros"),
+        'error-unknown-option': (False, "Error instead of warning for unknown options"),
+    }
+
+    COMPILER_UNIQUE_OPTION_MAP = {
+        'i8': 'i8',
+        'r8': 'r8',
+        'optarch': 'xHost',
+        'ieee': 'fltconsistency',
+        'strict': ['fp-speculation=strict', 'fp-model strict'],
+        'precise': ['fp-model precise'],
+        'defaultprec': ['ftz', 'fp-speculation=safe', 'fp-model source'],
+        'loose': ['fp-model fast=1'],
+        'veryloose': ['fp-model fast=2'],
+        'vectorize': {False: 'no-vec', True: 'vec'},
+        'intel-static': 'static-intel',
+        'no-icc': 'no-icc',
+        'error-unknown-option': 'we10006',  # error at warning #10006: ignoring unknown option
+    }
+
+    # used when 'optarch' toolchain option is enabled (and --optarch is not specified)
+    COMPILER_OPTIMAL_ARCHITECTURE_OPTION = {
+        (systemtools.X86_64, systemtools.AMD): 'xHost',
+        (systemtools.X86_64, systemtools.INTEL): 'xHost',
+    }
+    # used with --optarch=GENERIC
+    COMPILER_GENERIC_OPTION = {
+        (systemtools.X86_64, systemtools.AMD): 'xSSE2',
+        (systemtools.X86_64, systemtools.INTEL): 'xSSE2',
+    }
+
+    COMPILER_CC = 'icc'
+    COMPILER_CXX = 'icpc'
+    COMPILER_C_UNIQUE_FLAGS = ['intel-static', 'no-icc']
+
+    COMPILER_F77 = 'ifort'
+    COMPILER_F90 = 'ifort'
+    COMPILER_FC = 'ifort'
+    COMPILER_F_UNIQUE_FLAGS = ['intel-static']
+
+    LINKER_TOGGLE_STATIC_DYNAMIC = {
+        'static': '-Bstatic',
+        'dynamic':'-Bdynamic',
+    }
+
+    LIB_MULTITHREAD = ['iomp5', 'pthread']  # iomp5 is OpenMP related
+
+    def __init__(self, *args, **kwargs):
+        """Toolchain constructor."""
+        class_constants = kwargs.setdefault('class_constants', [])
+        class_constants.append('LIB_MULTITHREAD')
+
+        super(IntelIccIfort, self).__init__(*args, **kwargs)
+
+    def _set_compiler_vars(self):
+        """Intel compilers-specific adjustments after setting compiler variables."""
+        super(IntelIccIfort, self)._set_compiler_vars()
+
+        if not ('icc' in self.COMPILER_MODULE_NAME and 'ifort' in self.COMPILER_MODULE_NAME):
+            raise EasyBuildError("_set_compiler_vars: missing icc and/or ifort from COMPILER_MODULE_NAME %s",
+                                 self.COMPILER_MODULE_NAME)
+
+        icc_root, _ = self.get_software_root(self.COMPILER_MODULE_NAME)[0:2]
+        icc_version, ifort_version = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+
+        if not ifort_version == icc_version:
+            raise EasyBuildError("_set_compiler_vars: mismatch between icc version %s and ifort version %s",
+                                 icc_version, ifort_version)
+
+        if LooseVersion(icc_version) < LooseVersion('2011'):
+            self.LIB_MULTITHREAD.insert(1, "guide")
+
+        libpaths = ['intel64']
+        if self.options.get('32bit', None):
+            libpaths.append('ia32')
+        libpaths = ['lib/%s' % x for x in libpaths]
+        if LooseVersion(icc_version) > LooseVersion('2011.4') and LooseVersion(icc_version) < LooseVersion('2013_sp1'):
+            libpaths = ['compiler/%s' % x for x in libpaths]
+
+        self.variables.append_subdirs("LDFLAGS", icc_root, subdirs=libpaths)
+
+    def set_variables(self):
+        """Set the variables."""
+        # -fopenmp is not supported in old versions (11.x)
+        icc_version, _ = self.get_software_version(self.COMPILER_MODULE_NAME)[0:2]
+        if LooseVersion(icc_version) < LooseVersion('12'):
+            self.options.options_map['openmp'] = 'openmp'
+
+        super(IntelIccIfort, self).set_variables()
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/pgi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/pgi.py
index 38b51f2..bafd97c 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/compiler/pgi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/compiler/pgi.py
@@ -39,14 +39,14 @@ from easybuild.tools.build_log import EasyBuildError
 from easybuild.tools.toolchain.compiler import Compiler
 
 
-TC_CONSTANT_PGI = "PGI"
+TC_CONSTANT_PGI = "pgi"
 
 
 class Pgi(Compiler):
     """PGI compiler class
     """
 
-    COMPILER_MODULE_NAME = ['PGI']
+    COMPILER_MODULE_NAME = ['pgi']
 
     COMPILER_FAMILY = TC_CONSTANT_PGI
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/craypgi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/craypgi.py
index 03cdac0..d0ba325 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/craypgi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/craypgi.py
@@ -32,5 +32,5 @@ from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 class CrayPGI(CrayPEPGI, CrayMPICH):
     """Compiler toolchain for Cray Programming Environment for Cray Compiling Environment (PGI) (PrgEnv-pgi)."""
-    NAME = 'CrayPGI'
+    NAME = 'craypgi'
     SUBTOOLCHAIN = DUMMY_TOOLCHAIN_NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/fft/fftw.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/fft/fftw.py
index 5e47614..4b1ab85 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/fft/fftw.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/fft/fftw.py
@@ -38,7 +38,7 @@ from easybuild.tools.toolchain.fft import Fft
 class Fftw(Fft):
     """FFTW FFT library"""
 
-    FFT_MODULE_NAME = ['FFTW']
+    FFT_MODULE_NAME = ['fftw']
 
     def _set_fftw_variables(self):
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/fft/intelfftw.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/fft/intelfftw.py
index 3b916e7..08952d8 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/fft/intelfftw.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/fft/intelfftw.py
@@ -40,7 +40,7 @@ from easybuild.tools.modules import get_software_root, get_software_version
 class IntelFFTW(Fftw):
     """FFTW wrapper functionality of Intel MKL"""
 
-    FFT_MODULE_NAME = ['imkl']
+    FFT_MODULE_NAME = ['intel'] #['imkl']
 
     FFT_LIB_GROUP = True
     FFT_LIB_STATIC = True
@@ -58,10 +58,10 @@ class IntelFFTW(Fftw):
         if self.options.get('i8', None):
             bitsuff = '_ilp64'
         compsuff = '_intel'
-        if get_software_root('icc') is None:
-            if get_software_root('PGI'):
+        if get_software_root('icc') is None and get_software_root('intel') is None:
+            if get_software_root('pgi'):
                 compsuff = '_pgi'
-            elif get_software_root('GCC'):
+            elif get_software_root('gcc'):
                 compsuff = '_gnu'
             else:
                 error_msg = "Not using Intel compilers, PGI nor GCC, don't know compiler suffix for FFTW libraries."

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcc.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcc.py
index 7a691ea..fe43680 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcc.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcc.py
@@ -33,7 +33,7 @@ from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 class GccToolchain(GCCcore):
     """Simple toolchain with just the GCC compilers."""
-    NAME = 'GCC'
+    NAME = 'gcc'
     COMPILER_MODULE_NAME = [NAME]
     SUBTOOLCHAIN = [GCCcore.NAME, DUMMY_TOOLCHAIN_NAME]
     OPTIONAL = False

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcccore.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcccore.py
index 1765ae7..8881c3b 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcccore.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcccore.py
@@ -33,7 +33,7 @@ from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 class GCCcore(Gcc):
     """Compiler-only toolchain, including only GCC and binutils."""
-    NAME = 'GCCcore'
+    NAME = 'gcccore'
     # Replace the default compiler module name with our own
     COMPILER_MODULE_NAME = [NAME]
     SUBTOOLCHAIN = DUMMY_TOOLCHAIN_NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcccuda.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcccuda.py
index 9d6a2b8..26117fb 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gcccuda.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gcccuda.py
@@ -37,5 +37,5 @@ class GccCUDA(GccToolchain, Cuda):
     """Compiler toolchain with GCC and CUDA."""
     NAME = 'gcccuda'
 
-    COMPILER_MODULE_NAME = ['GCC', 'CUDA']
+    COMPILER_MODULE_NAME = ['gcc', 'cuda']
     SUBTOOLCHAIN = GccToolchain.NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gnu.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gnu.py
index f5c6d8e..61ac447 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/gnu.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gnu.py
@@ -34,5 +34,5 @@ from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 class GNU(Gcc):
     """Compiler-only toolchain, including only GCC and binutils."""
-    NAME = 'GNU'
+    NAME = 'gnu'
     SUBTOOLCHAIN = DUMMY_TOOLCHAIN_NAME

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gopenmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gopenmpi.py
new file mode 100644
index 0000000..3a1bed3
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/gopenmpi.py
@@ -0,0 +1,40 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for gompi compiler toolchain (includes GCC and OpenMPI).
+
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.toolchains.gcc import GccToolchain
+from easybuild.toolchains.mpi.openmpi import OpenMPI
+
+
+class GOpenMPI(GccToolchain, OpenMPI):
+    """Compiler toolchain with GCC and OpenMPI."""
+    NAME = 'gopenmpi'
+
+#git clone https://github.com/infphilo/tophat.git
+    SUBTOOLCHAIN = GccToolchain.NAME
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/iccifort.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iccifort.py
index f6038d4..2d2a458 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/iccifort.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iccifort.py
@@ -40,7 +40,7 @@ class IccIfort(IntelIccIfort):
     NAME = 'iccifort'
     # use GCCcore as subtoolchain rather than GCC, since two 'real' compiler-only toolchains don't mix well,
     # in particular in a hierarchical module naming scheme
-    SUBTOOLCHAIN = [GCCcore.NAME, DUMMY_TOOLCHAIN_NAME]
+    SUBTOOLCHAIN = [DUMMY_TOOLCHAIN_NAME] # [GCCcore.NAME, DUMMY_TOOLCHAIN_NAME]
     OPTIONAL = False
 
     def is_deprecated(self):

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iintelmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iintelmpi.py
new file mode 100644
index 0000000..a1905d0
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iintelmpi.py
@@ -0,0 +1,45 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for imvapich2 compiler toolchain (includes Intel compilers (icc, ifort), MVAPICH2,
+Intel Math Kernel Library (MKL), and Intel FFTW wrappers.
+:author: Karsten Siller
+
+based on iompi.py toolchain
+:author: Stijn De Weirdt (Ghent University)
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.toolchains.intel import Intel
+# from easybuild.toolchains.iccifort import IccIfort
+from easybuild.toolchains.mpi.intelmpi import IntelMPI
+
+
+class Imvapich2(Intel, IntelMPI):
+    """
+    Compiler toolchain with Intel compilers (icc/ifort), MKL, and MVAPICH2.
+    """
+    NAME = 'iintelmpi'
+    SUBTOOLCHAIN = Intel.NAME

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/imvapich2.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/imvapich2.py
new file mode 100644
index 0000000..a1b3f71
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/imvapich2.py
@@ -0,0 +1,45 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for imvapich2 compiler toolchain (includes Intel compilers (icc, ifort), MVAPICH2,
+Intel Math Kernel Library (MKL), and Intel FFTW wrappers.
+:author: Karsten Siller
+
+based on iompi.py toolchain
+:author: Stijn De Weirdt (Ghent University)
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.toolchains.intel import Intel
+# from easybuild.toolchains.iccifort import IccIfort
+from easybuild.toolchains.mpi.mvapich2 import Mvapich2
+
+
+class Imvapich2(Intel, Mvapich2):
+    """
+    Compiler toolchain with Intel compilers (icc/ifort), MKL, and MVAPICH2.
+    """
+    NAME = 'imvapich2'
+    SUBTOOLCHAIN = Intel.NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/intel.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/intel.py
index 248e724..7da45e4 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/intel.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/intel.py
@@ -31,19 +31,20 @@ Intel Math Kernel Library (MKL), and Intel FFTW wrappers).
 """
 from distutils.version import LooseVersion
 
-from easybuild.toolchains.iimpi import Iimpi
+# from easybuild.toolchains.iimpi import Iimpi
+from easybuild.toolchains.iccifort import IccIfort
 from easybuild.toolchains.iimkl import Iimkl
 from easybuild.toolchains.fft.intelfftw import IntelFFTW
 from easybuild.toolchains.linalg.intelmkl import IntelMKL
+from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
-
-class Intel(Iimpi, IntelMKL, IntelFFTW):
+class Intel(IccIfort, IntelMKL, IntelFFTW):
     """
     Compiler toolchain with Intel compilers (icc/ifort), Intel MPI,
     Intel Math Kernel Library (MKL) and Intel FFTW wrappers.
     """
     NAME = 'intel'
-    SUBTOOLCHAIN = [Iimpi.NAME, Iimkl.NAME]
+    SUBTOOLCHAIN = [DUMMY_TOOLCHAIN_NAME] #[IccIfort.NAME, Iimkl.NAME]
 
     def is_deprecated(self):
         """Return whether or not this toolchain is deprecated."""
@@ -55,5 +56,5 @@ class Intel(Iimpi, IntelMKL, IntelFFTW):
             deprecated = True
         else:
             deprecated = False
-
-        return deprecated
+        # using version >=16.0 so above logic does not work on Rivanna
+        return False #deprecated

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iopenmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iopenmpi.py
new file mode 100644
index 0000000..a5904ff
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/iopenmpi.py
@@ -0,0 +1,45 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for iomkl compiler toolchain (includes Intel compilers (icc, ifort), OpenMPI,
+Intel Math Kernel Library (MKL), and Intel FFTW wrappers.
+
+:author: Stijn De Weirdt (Ghent University)
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.toolchains.mpi.openmpi import OpenMPI
+from easybuild.toolchains.intel import Intel
+#from easybuild.toolchains.fft.intelfftw import IntelFFTW
+#from easybuild.toolchains.linalg.intelmkl import IntelMKL
+
+
+class IOpenMPI(Intel, OpenMPI):
+    """
+    Compiler toolchain with Intel compilers (icc/ifort), OpenMPI,
+    Intel Math Kernel Library (MKL) and Intel FFTW wrappers.
+    """
+    NAME = 'iopenmpi'
+    SUBTOOLCHAIN = Intel.NAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/acml.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/acml.py
index 297fd13..c4c5890 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/acml.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/acml.py
@@ -38,14 +38,14 @@ from easybuild.tools.build_log import EasyBuildError
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_ACML = 'ACML'
+TC_CONSTANT_ACML = 'acml'
 
 
 class Acml(LinAlg):
     """
     Provides ACML BLAS/LAPACK support.
     """
-    BLAS_MODULE_NAME = ['ACML']
+    BLAS_MODULE_NAME = ['acml']
     # full list of libraries is highly dependent on ACML version and toolchain compiler (ifort, gfortran, ...)
     BLAS_LIB = ['acml']
     BLAS_LIB_MT = ['acml_mp']
@@ -54,7 +54,7 @@ class Acml(LinAlg):
     # is completed in _set_blas_variables, depends on compiler used
     BLAS_LIB_DIR = []
 
-    LAPACK_MODULE_NAME = ['ACML']
+    LAPACK_MODULE_NAME = ['acml']
     LAPACK_IS_BLAS = True
     LAPACK_FAMILY = TC_CONSTANT_ACML
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/atlas.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/atlas.py
index 6348038..a5767e8 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/atlas.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/atlas.py
@@ -32,7 +32,7 @@ Support for ATLAS as toolchain linear algebra library.
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_ATLAS = 'ATLAS'
+TC_CONSTANT_ATLAS = 'atlas'
 
 
 class Atlas(LinAlg):
@@ -40,11 +40,11 @@ class Atlas(LinAlg):
     Provides ATLAS BLAS/LAPACK support.
     LAPACK is a build dependency only
     """
-    BLAS_MODULE_NAME = ['ATLAS']
+    BLAS_MODULE_NAME = ['atlas']
     BLAS_LIB = ["cblas", "f77blas", "atlas"]
     BLAS_LIB_MT = ["ptcblas", "ptf77blas", "atlas"]
     BLAS_FAMILY = TC_CONSTANT_ATLAS
 
-    LAPACK_MODULE_NAME = ['ATLAS']
+    LAPACK_MODULE_NAME = ['atlas']
     LAPACK_LIB = ['lapack']
     LAPACK_FAMILY = TC_CONSTANT_ATLAS

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/blacs.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/blacs.py
index bc38cb7..bc49450 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/blacs.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/blacs.py
@@ -36,7 +36,7 @@ class Blacs(LinAlg):
     """
     Trivial class, provides BLACS support.
     """
-    BLACS_MODULE_NAME = ['BLACS']
+    BLACS_MODULE_NAME = ['blacs']
     BLACS_LIB = ["blacsCinit", "blacsF77init", "blacs"]
     BLACS_LIB_GROUP = True
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/blis.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/blis.py
index d1ad2d4..b038581 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/blis.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/blis.py
@@ -32,13 +32,13 @@ Support for BLIS as toolchain linear algebra library.
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_BLIS = 'BLIS'
+TC_CONSTANT_BLIS = 'blis'
 
 
 class Blis(LinAlg):
     """
     Trivial class, provides BLIS support.
     """
-    BLAS_MODULE_NAME = ['BLIS']
+    BLAS_MODULE_NAME = ['blis']
     BLAS_LIB = ['blis']
     BLAS_FAMILY = TC_CONSTANT_BLIS

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/flame.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/flame.py
index 27bd08c..cac2427 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/flame.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/flame.py
@@ -32,11 +32,11 @@ Support for FLAME as toolchain linear algebra library.
 from easybuild.toolchains.linalg.lapack import Lapack
 
 
-TC_CONSTANT_OPENBLAS = 'FLAME'
+TC_CONSTANT_OPENBLAS = 'flame'
 
 
 class Flame(Lapack):
     """Less trivial module, provides FLAME support."""
-    LAPACK_MODULE_NAME = ['FLAME'] + Lapack.LAPACK_MODULE_NAME  # no super()
+    LAPACK_MODULE_NAME = ['flame'] + Lapack.LAPACK_MODULE_NAME  # no super()
     LAPACK_LIB = ['lapack2flame', 'flame'] + Lapack.LAPACK_LIB  # no super()
     LAPACK_FAMILY = TC_CONSTANT_FLAME

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/gotoblas.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/gotoblas.py
index a0265f5..77a6f53 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/gotoblas.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/gotoblas.py
@@ -32,13 +32,13 @@ Support for GotoBLAS as toolchain linear algebra library.
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_GOTOBLAS = 'GotoBLAS'
+TC_CONSTANT_GOTOBLAS = 'gotoblas'
 
 
 class GotoBLAS(LinAlg):
     """
     Trivial class, provides GotoBLAS support.
     """
-    BLAS_MODULE_NAME = ['GotoBLAS']
+    BLAS_MODULE_NAME = ['gotoblas']
     BLAS_LIB = ['goto']
     BLAS_FAMILY = TC_CONSTANT_GOTOBLAS

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/intelmkl.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/intelmkl.py
index 33ae3a5..be8e337 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/intelmkl.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/intelmkl.py
@@ -49,7 +49,7 @@ class IntelMKL(LinAlg):
     """Support for Intel MKL."""
 
     # library settings are inspired by http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
-    BLAS_MODULE_NAME = ['imkl']
+    BLAS_MODULE_NAME = ['intel'] # ['imkl']
     BLAS_LIB_MAP = {
         "lp64": '_lp64',
         "interface": None,
@@ -61,17 +61,17 @@ class IntelMKL(LinAlg):
     BLAS_LIB_STATIC = True
     BLAS_FAMILY = TC_CONSTANT_INTELMKL
 
-    LAPACK_MODULE_NAME = ['imkl']
+    LAPACK_MODULE_NAME = ['intel'] # ['imkl']
     LAPACK_IS_BLAS = True
     LAPACK_FAMILY = TC_CONSTANT_INTELMKL
 
-    BLACS_MODULE_NAME = ['imkl']
+    BLACS_MODULE_NAME = ['intel'] # ['imkl']
     BLACS_LIB = ["mkl_blacs%(mpi)s%(lp64)s"]
     BLACS_LIB_MAP = {'mpi':None}
     BLACS_LIB_GROUP = True
     BLACS_LIB_STATIC = True
 
-    SCALAPACK_MODULE_NAME = ['imkl']
+    SCALAPACK_MODULE_NAME = ['intel'] # ['imkl']
     SCALAPACK_LIB = ["mkl_scalapack%(lp64_sc)s"]
     SCALAPACK_LIB_MT = ["mkl_scalapack%(lp64_sc)s"]
     SCALAPACK_LIB_MAP = {'lp64_sc': '_lp64'}

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/lapack.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/lapack.py
index 38ae063..729bd0e 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/lapack.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/lapack.py
@@ -32,11 +32,11 @@ Support for LAPACK as toolchain linear algebra library.
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_LAPACK = 'LAPACK'
+TC_CONSTANT_LAPACK = 'lapack'
 
 
 class Lapack(LinAlg):
     """Trivial class, provides LAPACK support."""
-    LAPACK_MODULE_NAME = ['LAPACK']
+    LAPACK_MODULE_NAME = ['lapack']
     LAPACK_LIB = ['lapack']
     LAPACK_FAMILY = TC_CONSTANT_LAPACK

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/libsci.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/libsci.py
index 6a1dd8e..5ff5ff3 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/libsci.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/libsci.py
@@ -36,7 +36,7 @@ from easybuild.tools.toolchain.linalg import LinAlg
 
 
 CRAY_LIBSCI_MODULE_NAME = 'cray-libsci'
-TC_CONSTANT_CRAY_LIBSCI = 'CrayLibSci'
+TC_CONSTANT_CRAY_LIBSCI = 'craylibsci'
 
 
 class LibSci(LinAlg):

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/openblas.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/openblas.py
index ebad2c2..9d7c60c 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/openblas.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/openblas.py
@@ -31,17 +31,17 @@ Support for OpenBLAS as toolchain linear algebra library.
 from easybuild.tools.toolchain.linalg import LinAlg
 
 
-TC_CONSTANT_OPENBLAS = 'OpenBLAS'
+TC_CONSTANT_OPENBLAS = 'openblas'
 
 
 class OpenBLAS(LinAlg):
     """
     Trivial class, provides OpenBLAS support.
     """
-    BLAS_MODULE_NAME = ['OpenBLAS']
+    BLAS_MODULE_NAME = ['openblas']
     BLAS_LIB = ['openblas']
     BLAS_FAMILY = TC_CONSTANT_OPENBLAS
 
-    LAPACK_MODULE_NAME = ['OpenBLAS']
+    LAPACK_MODULE_NAME = ['openblas']
     LAPACK_IS_BLAS = True
     LAPACK_FAMILY = TC_CONSTANT_OPENBLAS

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/scalapack.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/scalapack.py
index bb4c81d..d9f8f1c 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/linalg/scalapack.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/linalg/scalapack.py
@@ -36,12 +36,12 @@ from easybuild.toolchains.linalg.blacs import Blacs
 
 class ScaLAPACK(Blacs):
     """Trivial class, provides ScaLAPACK support (on top of BLACS)."""
-    SCALAPACK_MODULE_NAME = ['ScaLAPACK']
+    SCALAPACK_MODULE_NAME = ['scalapack']
     SCALAPACK_LIB = ['scalapack']
 
     def is_required(self, name):
         """Determine whether BLACS is a required toolchain element, based on ScaLAPACK version."""
-        if name == "BLACS":
+        if name == "blacs":
             # BLACS is no longer required for ScaLAPACK >= 2.0
             return LooseVersion(self.get_software_version(self.SCALAPACK_MODULE_NAME)[0]) < LooseVersion("2.0")
         else:

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/intelmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/intelmpi.py
index 4d6883a..1f3afd3 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/intelmpi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/intelmpi.py
@@ -40,7 +40,7 @@ TC_CONSTANT_INTELMPI = "IntelMPI"
 
 class IntelMPI(Mpich2):
     """Intel MPI class"""
-    MPI_MODULE_NAME = ['impi']
+    MPI_MODULE_NAME = ['intelmpi']
     MPI_FAMILY = TC_CONSTANT_INTELMPI
 
     MPI_LIBRARY_NAME = 'mpi'

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mpich.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mpich.py
index 7174364..90aa65d 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mpich.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mpich.py
@@ -42,7 +42,7 @@ TC_CONSTANT_MPI_TYPE_MPICH = "MPI_TYPE_MPICH"
 
 class Mpich(Mpi):
     """MPICH MPI class"""
-    MPI_MODULE_NAME = ['MPICH']
+    MPI_MODULE_NAME = ['mpich']
     MPI_FAMILY = TC_CONSTANT_MPICH
     MPI_TYPE = TC_CONSTANT_MPI_TYPE_MPICH
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mpich2.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mpich2.py
index 57259ce..9a7ce3c 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mpich2.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mpich2.py
@@ -38,7 +38,7 @@ TC_CONSTANT_MPI_TYPE_MPICH = "MPI_TYPE_MPICH"
 
 class Mpich2(Mpich):
     """MPICH2 MPI class"""
-    MPI_MODULE_NAME = ["MPICH2"]
+    MPI_MODULE_NAME = ["mpich2"]
     MPI_FAMILY = TC_CONSTANT_MPICH2
     MPI_TYPE = TC_CONSTANT_MPI_TYPE_MPICH
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mvapich2.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mvapich2.py
index 501e73f..1b1d85f 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/mvapich2.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/mvapich2.py
@@ -32,12 +32,12 @@ Support for MVAPICH2 as toolchain MPI library.
 from easybuild.toolchains.mpi.mpich2 import Mpich2
 
 
-TC_CONSTANT_MVAPICH2 = "MVAPICH2"
+TC_CONSTANT_MVAPICH2 = "mvapich2"
 
 
 class Mvapich2(Mpich2):
     """MVAPICH2 MPI class"""
-    MPI_MODULE_NAME = ["MVAPICH2"]
+    MPI_MODULE_NAME = ["mvapich2"]
     MPI_FAMILY = TC_CONSTANT_MVAPICH2
 
     MPI_LIBRARY_NAME = 'mpich'

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/openmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/openmpi.py
index e957f94..7eb5fde 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/openmpi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/openmpi.py
@@ -41,13 +41,13 @@ from easybuild.tools.toolchain.mpi import Mpi
 from easybuild.tools.toolchain.variables import CommandFlagList
 
 
-TC_CONSTANT_OPENMPI = "OpenMPI"
+TC_CONSTANT_OPENMPI = "openmpi"
 TC_CONSTANT_MPI_TYPE_OPENMPI = "MPI_TYPE_OPENMPI"
 
 
 class OpenMPI(Mpi):
     """OpenMPI MPI class"""
-    MPI_MODULE_NAME = ['OpenMPI']
+    MPI_MODULE_NAME = ['openmpi']
     MPI_FAMILY = TC_CONSTANT_OPENMPI
     MPI_TYPE = TC_CONSTANT_MPI_TYPE_OPENMPI
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/qlogicmpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/qlogicmpi.py
index 6ed2c9f..78735bd 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/qlogicmpi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/qlogicmpi.py
@@ -33,12 +33,12 @@ from easybuild.toolchains.mpi.mpich2 import Mpich2
 from easybuild.tools.toolchain.variables import CommandFlagList
 
 
-TC_CONSTANT_QLOGICMPI = "QLogicMPI"
+TC_CONSTANT_QLOGICMPI = "qlogicmpi"
 
 
 class QLogicMPI(Mpich2):
     """QLogicMPI MPI class"""
-    MPI_MODULE_NAME = ["QLogicMPI"]
+    MPI_MODULE_NAME = ["qlogicmpi"]
     MPI_FAMILY = TC_CONSTANT_QLOGICMPI
 
     MPI_LIBRARY_NAME = 'mpich'

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/spectrummpi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/spectrummpi.py
index 1ff9ed9..acdaf13 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/mpi/spectrummpi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/mpi/spectrummpi.py
@@ -33,4 +33,4 @@ from easybuild.toolchains.mpi.openmpi import OpenMPI
 
 class SpectrumMPI(OpenMPI):
     """Spectrum MPI class"""
-    MPI_MODULE_NAME = ['SpectrumMPI']
+    MPI_MODULE_NAME = ['spectrummpi']

diff --git a/home/uvacse/git/easybuild-framework/easybuild/toolchains/pgi.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/pgi.py
index f05f83c..f4636b2 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/toolchains/pgi.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/pgi.py
@@ -38,7 +38,7 @@ from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
 
 class PgiToolchain(Pgi):
     """Simple toolchain with just the PGI compilers."""
-    NAME = 'PGI'
+    NAME = 'pgi'
     # use GCCcore as subtoolchain rather than GCC, since two 'real' compiler-only toolchains don't mix well,
     # in particular in a hierarchical module naming scheme
     SUBTOOLCHAIN = [GCCcore.NAME, DUMMY_TOOLCHAIN_NAME]

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/singularity.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/singularity.py
new file mode 100644
index 0000000..a1bddfe
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/toolchains/singularity.py
@@ -0,0 +1,38 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for dummy compiler toolchain.
+
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.tools.toolchain.container import Container
+
+TC_CONSTANT_DUMMY = "DUMMY"
+
+class Singularity(Container):
+    """Container toolchain with singularity."""
+    NAME = 'singularity'
+

diff --git a/home/uvacse/git/easybuild-framework/easybuild/tools/module_generator.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_generator.py
index 81867d2..d29dfc7 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/tools/module_generator.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_generator.py
@@ -550,7 +550,8 @@ class ModuleGenerator(object):
             # default: include 'whatis' statements with description, homepage, and extensions (if any)
             whatis = [
                 "Description: %s" % self.app.cfg['description'],
-                "Homepage: %s" % self.app.cfg['homepage']
+                "Homepage: %s" % self.app.cfg['homepage'],
+                "Application class: %s" % self.app.cfg['moduleclass']
             ]
             extensions = self._generate_extension_list()
             if extensions:

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_naming_scheme/rivanna_hmns.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_naming_scheme/rivanna_hmns.py
new file mode 100644
index 0000000..5b11322
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_naming_scheme/rivanna_hmns.py
@@ -0,0 +1,253 @@
+##
+# Copyright 2013-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+Implementation of an example hierarchical module naming scheme.
+
+:author: Kenneth Hoste (Ghent University)
+:author: Markus Geimer (Forschungszentrum Juelich GmbH)
+"""
+
+import os
+import re
+from vsc.utils import fancylogger
+
+from easybuild.tools.build_log import EasyBuildError
+from easybuild.tools.module_naming_scheme import ModuleNamingScheme
+from easybuild.tools.module_naming_scheme.toolchain import det_toolchain_compilers, det_toolchain_mpi
+
+
+CONTAINER = 'container'
+CORE = 'core'
+COMPILER = 'compiler'
+MPI = 'mpi'
+TOOLCHAINS = 'toolchains'
+CONTAINER_TOOLCHAINS = ['singularity']
+
+MODULECLASS_COMPILER = 'compiler'
+MODULECLASS_MPI = 'mpi'
+MODULECLASS_CONTAINER = 'containersystem'
+
+# note: names in keys are ordered alphabetically
+COMP_NAME_VERSION_TEMPLATES = {
+    # required for use of iccifort toolchain
+    'icc,ifort': ('intel', '%(icc)s'),
+    # required for use of ClangGCC toolchain
+    'clang,gcc': ('clang-gcc', '%(clang)s-%(gcc)s'),
+    # required for use of gcccuda toolchain, and for CUDA installed with GCC toolchain
+    'cuda,gcc': ('gcc-cuda', '%(gcc)s-%(cuda)s'),
+    # required for use of iccifortcuda toolchain
+    'cuda,icc,ifort': ('intel-cuda', '%(icc)s-%(cuda)s'),
+    # required for CUDA installed with iccifort toolchain
+    # need to use 'intel' here because 'iccifort' toolchain maps to 'intel' (see above)
+    'cuda,intel': ('intel-cuda', '%(intel)s-%(cuda)s'),
+    # required for use of xlcxlf toolchain
+    'xlc,xlf': ('xlcxlf', '%(xlc)s'),
+}
+
+
+class RivannaHMNS(ModuleNamingScheme):
+    """Class implementing an example hierarchical module naming scheme."""
+
+    REQUIRED_KEYS = ['name', 'versionprefix', 'version', 'versionsuffix', 'toolchain', 'moduleclass']
+
+    def requires_toolchain_details(self):
+        """
+        Determine whether toolchain details are required by this module naming scheme,
+        e.g. whether one of det_toolchain_* functions are relied upon.
+        """
+        return True
+
+    def det_full_module_name(self, ec):
+        """
+        Determine full module name, relative to the top of the module path.
+        Examples: Core/GCC/4.8.3, Compiler/GCC/4.8.3/OpenMPI/1.6.5, MPI/GCC/4.8.3/OpenMPI/1.6.5/HPL/2.1
+        """
+        return os.path.join(self.det_module_subdir(ec), self.det_short_module_name(ec))
+
+    def det_short_module_name(self, ec):
+        """
+        Determine short module name, i.e. the name under which modules will be exposed to users.
+        Examples: GCC/4.8.3, OpenMPI/1.6.5, OpenBLAS/0.2.9, HPL/2.1, Python/2.7.5
+        """
+        return os.path.join(ec['name'], self.det_full_version(ec))
+
+    def det_full_version(self, ec):
+        """Determine full version, taking into account version prefix/suffix."""
+        # versionprefix is not always available (e.g., for toolchains)
+        versionprefix = ec.get('versionprefix', '')
+        return versionprefix + ec['version'] + ec['versionsuffix']
+
+    def det_toolchain_compilers_name_version(self, tc_comps):
+        """
+        Determine toolchain compiler tag, for given list of compilers.
+        """
+        if tc_comps is None:
+            # no compiler in toolchain, dummy toolchain
+            res = None
+        elif len(tc_comps) == 1:
+            res = (tc_comps[0]['name'], self.det_full_version(tc_comps[0]))
+        else:
+            comp_versions = dict([(comp['name'], self.det_full_version(comp)) for comp in tc_comps])
+            comp_names = comp_versions.keys()
+            key = ','.join(sorted(comp_names))
+            if key in COMP_NAME_VERSION_TEMPLATES:
+                tc_comp_name, tc_comp_ver_tmpl = COMP_NAME_VERSION_TEMPLATES[key]
+                tc_comp_ver = tc_comp_ver_tmpl % comp_versions
+                # make sure that icc/ifort versions match
+                if tc_comp_name == 'intel' and comp_versions['icc'] != comp_versions['ifort']:
+                    raise EasyBuildError("Bumped into different versions for Intel compilers: %s", comp_versions)
+            else:
+                raise EasyBuildError("Unknown set of toolchain compilers, module naming scheme needs work: %s",
+                                     comp_names)
+            res = (tc_comp_name, tc_comp_ver)
+        return res
+
+    def det_module_subdir(self, ec):
+        """
+        Determine module subdirectory, relative to the top of the module path.
+        This determines the separation between module names exposed to users, and what's part of the $MODULEPATH.
+        Examples: Core, Compiler/GCC/4.8.3, MPI/GCC/4.8.3/OpenMPI/1.6.5
+        """
+        tc_comps = det_toolchain_compilers(ec)
+        # determine prefix based on type of toolchain used
+        if tc_comps is None:
+            self.log.debug('ec.toolchain.TOOLCHAIN_FAMILY=%s', ec.toolchain.TOOLCHAIN_FAMILY)
+            if ec['moduleclass'] == 'toolchain':
+                subdir = TOOLCHAINS
+            elif ec.toolchain.TOOLCHAIN_FAMILY == 'CONTAINER':
+                subdir = os.path.join(CONTAINER,ec.toolchain.name,ec.toolchain.version)
+            else:
+                # no compiler in toolchain, dummy toolchain => Core module
+                subdir = CORE
+        else:
+            tc_comp_name, tc_comp_ver = self.det_toolchain_compilers_name_version(tc_comps)
+            tc_mpi = det_toolchain_mpi(ec)
+            if tc_mpi is None:
+                # compiler-only toolchain => Compiler/<compiler_name>/<compiler_version> namespace
+                subdir = os.path.join(COMPILER, tc_comp_name, tc_comp_ver)
+            else:
+                # compiler-MPI toolchain => MPI/<comp_name>/<comp_version>/<MPI_name>/<MPI_version> namespace
+                tc_mpi_fullver = self.det_full_version(tc_mpi)
+                subdir = os.path.join(MPI, tc_comp_name, tc_comp_ver, tc_mpi['name'], tc_mpi_fullver)
+
+        return subdir
+
+    def det_module_symlink_paths(self, ec):
+        """
+        Determine list of paths in which symlinks to module files must be created.
+        """
+        # symlinks are not very useful in the context of a hierarchical MNS
+        return []
+
+    def det_modpath_extensions(self, ec):
+        """
+        Determine module path extensions, if any.
+        Examples: Compiler/GCC/4.8.3 (for GCC/4.8.3 module), MPI/GCC/4.8.3/OpenMPI/1.6.5 (for OpenMPI/1.6.5 module)
+        """
+        modclass = ec['moduleclass']
+        tc_comps = det_toolchain_compilers(ec)
+        tc_comp_info = self.det_toolchain_compilers_name_version(tc_comps)
+
+        # we consider the following to be compilers:
+        # * has 'compiler' specified as moduleclass
+        is_compiler = modclass == MODULECLASS_COMPILER
+        # * CUDA, but only when not installed with 'dummy' toolchain (i.e. one or more toolchain compilers found)
+        non_dummy_tc = tc_comps is not None
+        non_dummy_cuda = ec['name'].lower() == 'cuda' and non_dummy_tc
+
+        paths = []
+        if is_compiler or non_dummy_cuda:
+            # obtain list of compilers based on that extend $MODULEPATH in some way other than <name>/<version>
+            extend_comps = []
+            # exclude GCC for which <name>/<version> is used as $MODULEPATH extension
+            excluded_comps = ['gcc','GCC','intel']
+            for comps in COMP_NAME_VERSION_TEMPLATES.keys():
+                extend_comps.extend([comp for comp in comps.split(',') if comp not in excluded_comps])
+
+            # print 'ec[name]:',ec['name']
+            # print 'extended_comps:',extend_comps
+            # print 'COMP_NAME_VERSION_TEMPLATES:',COMP_NAME_VERSION_TEMPLATES
+            # print 'COMP_NAME_VERSION_TEMPLATES.keys():', COMP_NAME_VERSION_TEMPLATES.keys()
+
+            comp_name_ver = None
+            if ec['name'] in extend_comps:
+                for key in COMP_NAME_VERSION_TEMPLATES:
+                    comp_names = key.split(',')
+                    if ec['name'] in comp_names:
+                        comp_name, comp_ver_tmpl = COMP_NAME_VERSION_TEMPLATES[key]
+                        comp_versions = {ec['name']: self.det_full_version(ec)}
+                        if ec['name'] == 'ifort':
+                            # 'icc' key should be provided since it's the only one used in the template
+                            comp_versions.update({'icc': self.det_full_version(ec)})
+
+                        if non_dummy_tc:
+                            tc_comp_name, tc_comp_ver = tc_comp_info
+                            if tc_comp_name in comp_names:
+                                # also provide toolchain version for non-dummy toolchains
+                                comp_versions.update({tc_comp_name: tc_comp_ver})
+
+                        comp_ver_keys = re.findall(r'%\((\w+)\)s', comp_ver_tmpl)
+                        if all(comp_ver_key in comp_versions for comp_ver_key in comp_ver_keys):
+                            comp_name_ver = [comp_name, comp_ver_tmpl % comp_versions]
+                            break
+            else:
+                comp_name_ver = [ec['name'], self.det_full_version(ec)]
+
+            if comp_name_ver is None:
+                raise EasyBuildError("Required compilers not available in toolchain %s for %s v%s",
+                                     ec['toolchain'], ec['name'], ec['version'])
+
+            paths.append(os.path.join(COMPILER, *comp_name_ver))
+
+        elif modclass == MODULECLASS_MPI:
+            if tc_comp_info is None:
+                raise EasyBuildError("No compiler available in toolchain %s used to install MPI library %s v%s, "
+                                     "which is required by the active module naming scheme.",
+                                     ec['toolchain'], ec['name'], ec['version'])
+            else:
+                tc_comp_name, tc_comp_ver = tc_comp_info
+                fullver = self.det_full_version(ec)
+                paths.append(os.path.join(MPI, tc_comp_name, tc_comp_ver, ec['name'], fullver))
+
+        elif modclass == MODULECLASS_CONTAINER:
+            self.log.debug('FULL VERSION %s', self.det_full_version(ec))
+            self.log.debug('ec.toolchain.TOOLCHAIN_FAMILY=%s', ec.toolchain.TOOLCHAIN_FAMILY)
+            paths.append(os.path.join(CONTAINER, ec['name'], self.det_full_version(ec)))
+            self.log.debug('paths=%s', paths)
+
+        return paths
+
+    def expand_toolchain_load(self, ec=None):
+        """
+        Determine whether load statements for a toolchain should be expanded to load statements for its dependencies.
+        This is useful when toolchains are not exposed to users.
+        """
+        return True
+
+    def det_init_modulepaths(self, ec):
+        """
+        Determine list of initial module paths (i.e. top of the hierarchy).
+        """
+        return [CORE,TOOLCHAINS]

diff --git a/home/uvacse/git/easybuild-framework/easybuild/tools/module_naming_scheme/toolchain.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_naming_scheme/toolchain.py
index f494d3b..39d1aa5 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/tools/module_naming_scheme/toolchain.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/module_naming_scheme/toolchain.py
@@ -33,7 +33,7 @@ from easybuild.framework.easyconfig.easyconfig import process_easyconfig, robot_
 from easybuild.tools.build_log import EasyBuildError
 from easybuild.tools.module_naming_scheme.utilities import det_full_ec_version
 from easybuild.tools.toolchain import DUMMY_TOOLCHAIN_NAME
-
+from easybuild.tools.toolchain.container import CONTAINER_FAMILY
 
 _log = fancylogger.getLogger('module_naming_scheme.toolchain', fname=False)
 
@@ -89,8 +89,9 @@ def det_toolchain_compilers(ec):
 
     :param ec: a parsed EasyConfig file (an AttributeError will occur if a simple dict is passed)
     """
+    _log.debug("Toolchain definition: %s" % ec.toolchain.definition)
     tc_elems = ec.toolchain.definition()
-    if ec.toolchain.name == DUMMY_TOOLCHAIN_NAME:
+    if ec.toolchain.name in [DUMMY_TOOLCHAIN_NAME, 'singularity']:
         # dummy toolchain has no compiler
         tc_comps = None
     elif not TOOLCHAIN_COMPILER in tc_elems:

diff --git a/home/uvacse/git/easybuild-framework/easybuild/tools/modules.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/modules.py
index d9d9026..8ddef58 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/tools/modules.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/modules.py
@@ -1360,7 +1360,7 @@ def get_software_root(name, with_env_var=False):
         res = (root, env_var)
     else:
         res = root
-
+    _log.debug("Found root for %s: %s" % (name, res))
     return res
 
 
diff --git a/home/uvacse/git/easybuild-framework/easybuild/tools/toolchain/compiler.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/compiler.py
index 25ca17d..41aea33 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/tools/toolchain/compiler.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/compiler.py
@@ -345,7 +345,7 @@ class Compiler(Toolchain):
         if optarch is not None:
             self.log.info("_set_optimal_architecture: using %s as optarch for %s.", optarch, self.arch)
             self.options.options_map['optarch'] = optarch
-
+        self.log.debug("optarch=%s" % self.options.options_map.get('optarch', None))
         if self.options.options_map.get('optarch', None) is None:
             optarch_flags_str = "%soptarch flags" % ('', 'generic ')[use_generic]
             error_msg = "Don't know how to set %s for %s/%s! " % (optarch_flags_str, self.arch, self.cpu_family)

diff --git a/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/container.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/container.py
new file mode 100644
index 0000000..08d520f
--- /dev/null
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/container.py
@@ -0,0 +1,37 @@
+##
+# Copyright 2012-2017 Ghent University
+#
+# This file is part of EasyBuild,
+# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
+# with support of Ghent University (http://ugent.be/hpc),
+# the Flemish Supercomputer Centre (VSC) (https://www.vscentrum.be),
+# Flemish Research Foundation (FWO) (http://www.fwo.be/en)
+# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
+#
+# http://github.com/hpcugent/easybuild
+#
+# EasyBuild is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation v2.
+#
+# EasyBuild is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
+##
+"""
+EasyBuild support for dummy compiler toolchain.
+
+:author: Kenneth Hoste (Ghent University)
+"""
+
+from easybuild.toolchains.compiler.dummycompiler import DummyCompiler
+
+CONTAINER_FAMILY = 'CONTAINER'
+
+class Container(DummyCompiler):
+    """Dummy toolchain."""
+    TOOLCHAIN_FAMILY = CONTAINER_FAMILY

diff --git a/home/uvacse/git/easybuild-framework/easybuild/tools/toolchain/toolchain.py b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/toolchain.py
index a5850a4..bbf48f0 100644
--- a/home/uvacse/git/easybuild-framework/easybuild/tools/toolchain/toolchain.py
+++ b/apps/software/EasyBuild/3.9.0/lib/python2.7/site-packages/easybuild_framework-3.9.0-py2.7.egg/easybuild/tools/toolchain/toolchain.py
@@ -724,7 +724,7 @@ class Toolchain(object):
         if loadmod:
             self._load_modules(silent=silent)
 
-        if self.name != DUMMY_TOOLCHAIN_NAME:
+        if self.name not in [DUMMY_TOOLCHAIN_NAME,'singularity']:
 
             trace_msg("defining build environment for %s/%s toolchain" % (self.name, self.version))
 
