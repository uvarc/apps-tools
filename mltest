#!/bin/bash
# test module load for the entire apps stack
# Ruoshi Sun
# 2020-11-17

if [ $# -ne 1 ]; then
    echo "Usage: `basename $0` CATEGORY"
    echo "    CATEGORY = core|toolchains|compiler|mpi|container|vendor|all"
    echo "Since the modules need to be loaded, you cannot run this script for other YYYYMMs."
    exit 1
fi

if [ "$1" = "all" ]; then
    CATEGORY=(core toolchains compiler mpi container vendor)
else
    CATEGORY=$1
fi

MODULEPATH_DEFAULT=/apps/modulefiles/standard/core:/apps/modulefiles/standard/toolchains:/apps/modulefiles/vendor

# stdout/stderr from module load
TMP=$(mktemp)


function ml {
    module purge
    module load "$@" &>$TMP
}

function print_result {
    N=$1
    Npass=$2
    shift 2
    FAIL=("$@")
    Nfail=${#FAIL[@]} 

    echo "--------"
    echo "PASS: $Npass/$N"
    echo "FAIL: $Nfail/$N"
    if [ $Nfail -gt 0 ]; then
        for i in "${FAIL[@]}"; do
            echo "  $i"
        done
    fi
}

for i in ${CATEGORY[@]}; do
    if [ "$i" = "vendor" ]; then
        PREFIX=/apps/modulefiles/$i
    else
        PREFIX=/apps/modulefiles/standard/$i
    fi

# list of modules that failed to load
    FAIL=()

    echo "[$PREFIX]"
    LUAS=($(find $PREFIX -name '*.lua'))
    N=${#LUAS[@]}
    for j in ${LUAS[@]}; do
        unset MODULEPATH
        ML=()
        LUA=$(basename $j)
        APP=$(echo $j|awk -F'/' '{print $(NF-1)}')
        VERSION=${LUA/.lua/}

        case "$i" in 
        "core"|"toolchains"|"vendor")
            export MODULEPATH=$MODULEPATH_DEFAULT
            ;;
        "compiler"|"container"|"mpi")
            n=$((${#PREFIX}+1))
            PARENT=$(dirname $j)
            PARENT=${PARENT:$n}
            PARENT=${PARENT%/*}
            COMPILER=${PARENT%%/*}

            if [ "$COMPILER" = "gcc-cuda" ]; then
                export MODULEPATH=/apps/modulefiles/standard/compiler:/apps/modulefiles/standard/mpi:$MODULEPATH_DEFAULT
            else
                export MODULEPATH=$MODULEPATH_DEFAULT
                if [ "$i" = "mpi" ]; then
                    ML+=($(echo $PARENT|awk -F'/' '{printf "%s/%s %s/%s",$1,$2,$3,$4}'))
                else
                    ML+=($PARENT)
                fi
            fi
            echo -n "$PARENT/"
            ;;
        *)
            echo "Unknown category"
            exit 1
            ;;
        esac

        echo -n "$APP/$VERSION "
        if [ ${VERSION:0:1} = "." ]; then 
            echo -n "(H) "
        fi
        echo -n "... "

        if [ "$COMPILER" = "gcc-cuda" ]; then
            if [ "$APP" = "scalapack" ]; then
                GCCVERSION=$(echo $PARENT|awk -F'/' '{sub(/-.*/,"",$2); print $2}')
                ML+=("gcc/$GCCVERSION" "openblas" "$PARENT/$APP/$VERSION")
            else
                ML+=("$PARENT/$APP/$VERSION")
            fi
        else
            ML+=("$APP/$VERSION")
        fi
        ml "${ML[@]}"

        if [ $? -eq 0 ]; then
            echo "PASS"
        else 
            echo "FAIL"
            cat $TMP

            case "$i" in
            "core"|"toolchain")
                FAIL+=("$APP/$VERSION")
                ;;
            *)
                FAIL+=("$PARENT/$APP/$VERSION")
                ;;
            esac
        fi
    done

    Npass=$(($N-${#FAIL[@]}))
    print_result $N $Npass "${FAIL[@]}"
    echo
done

rm $TMP
