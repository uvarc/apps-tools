#!/bin/bash
#
# Performs rsync from build to production
# Ruoshi Sun

BUILD_DIR=$(realpath /apps)
YYYYMM_build=$(basename $BUILD_DIR)
echo "BUILD_DIR = $BUILD_DIR"

PROD_DIR=${BUILD_DIR/_build/}
YYYYMM=$(basename $PROD_DIR)
echo "PROD_DIR = $PROD_DIR"

SOFTWARE="software"
MODFILE="modulefiles"

function print_usage {
	echo "Usage: `basename $0` EASYCONFIG"
	echo "Usage: `basename $0` vendor APP/VERSION"
}

function print_error {
	RED='\e[1;31m'
	NC='\e[m'
	echo -e "${RED}Error: $1${NC}"
	echo
	print_usage
	exit 1
}

for i in $BUILD_DIR $PROD_DIR; do
	if [ ! -d $i ]; then
        print_error "Cannot find directory $i. Please update $0."
    fi
done

NARGS=$#
if [ $NARGS -eq 0 ]; then
	print_usage
	exit 0
fi

if [ $NARGS -eq 1 ]; then
    EB=$1
    if [ ! -e $EB ]; then
        print_error "cannot find easyconfig file $1."
    fi
    ml easybuild

    read -r PREFIX DIR < <(
        eb -D $1 | grep '[x]' | tail -1 | \
        sed -e 's/^.*module: //' -e 's/)$//' | \
        awk -F'|' '{print $1,$2}'
    )
    PREFIX="standard/$PREFIX"
# add '.' for hidden modulefile
    if grep -q "^hidden\s*=\s*True" $EB; then
        LUA="${DIR/\///.}.lua"
    else
        LUA="$DIR.lua"
    fi
else
    case $1 in
    vendor)
        if [ $NARGS -ne 2 ]; then
            print_error "missing arguments."
        fi
        PREFIX="$1"
        DIR=$2
        ;;
    *)
        print_error "invalid category $1."
        ;;
    esac
fi

SOFTWARE_PATH=$BUILD_DIR/$SOFTWARE/$PREFIX/$DIR
MODFILE_PATH="$BUILD_DIR/$MODFILE/$PREFIX/$LUA"

echo "== Paths"
echo "Software source and destination:"
echo "$SOFTWARE_PATH"
echo "$PROD_DIR/$SOFTWARE/$PREFIX/$DIR"
echo 
echo "Module file source and destination:"
echo "$MODFILE_PATH"
echo "$PROD_DIR/$MODFILE/$PREFIX/`dirname $DIR`"
echo

# check paths of software and module file
for i in $SOFTWARE_PATH $MODFILE_PATH; do
	if [ ! -e $i ]; then
        print_error "$i not found."
    fi
done

# dry rsync
# note: rsync -R uses relative paths
#read -p "== Press enter to perform rsync dry run: " dryrun
#if [ ! -z $dryrun ]; then
#	#echo "Exiting..."
#	#exit 0
#fi
#
#echo "== Performing rsync dry run..."
#
#cd $BUILD_DIR 
#rsync -navR $SOFTWARE/$PREFIX/$DIR    $PROD_DIR && \
#rsync -navR $MODFILE/$PREFIX/$LUA $PROD_DIR

# real rsync
echo
read -p "== Perform rsync now? [y/N]" realrun

if [[ ! $realrun =~ ^[Yy]$ ]]; then
	echo "== No changes performed."
	exit 0
fi

echo "== Performing rsync..."
cd $BUILD_DIR 
rsync -avR --delete $SOFTWARE/$PREFIX/$DIR $PROD_DIR && \
rsync -avR $MODFILE/$PREFIX/$LUA  $PROD_DIR

# check default symlink
APP=`dirname $DIR`
if [ -e $MODFILE/$PREFIX/$APP/default ]; then
    rsync -avR $MODFILE/$PREFIX/$APP/default $PROD_DIR
fi

echo
echo "== Done."
