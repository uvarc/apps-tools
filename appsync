#!/bin/bash
#
# Performs rsync from build to production
# Ruoshi Sun

function print_usage {
	echo "Usage: `basename $0` EASYCONFIG"
	echo "Usage: `basename $0` vendor APP/VERSION"
}

function print_error {
	RED='\e[1;31m'
	NC='\e[m'
	echo -e "${RED}Error: $1${NC}"
	echo
	print_usage
	exit 1
}

for i in $BUILD_DIR $PROD_DIR; do
	if [ ! -d $i ]; then
        print_error "Cannot find directory $i. Please update $0."
    fi
done

NARGS=$#
if [ $NARGS -eq 0 ]; then
	print_usage
	exit 0
fi

SOFTWARE="software"
MODFILE="modulefiles"

# Need to use realpath for vendor source and destination 
# Do not use /apps or it will overwrite the vendor symlink
if [ $NARGS -eq 2 ]; then
    case $1 in
    vendor)
        SOURCE=/sfs/applications/$1/installation
        DEST=/sfs/applications/$1/production
        SOFTWARE_PATH=$SOURCE/$SOFTWARE/$2 
        SOFTWARE_DEST=$DEST/$SOFTWARE/$2
        MODFILE_PATH=$SOURCE/$MODFILE/$2.lua
        MODFILE_DEST=$DEST/$MODFILE/$2.lua

        echo "== Paths"
        echo "Software source and destination:"
        echo "$SOFTWARE_PATH"
        echo "$SOFTWARE_DEST"
        echo 
        echo "Module file source and destination:"
        echo "$MODFILE_PATH"
        echo "$MODFILE_DEST"
        echo
        read -p "== Perform rsync now? [y/N]" realrun

        if [[ ! $realrun =~ ^[Yy]$ ]]; then
            echo "== No changes performed."
            exit 0
        fi
        echo
        rsync -av $SOFTWARE_PATH $(dirname $SOFTWARE_DEST)
        rsync -av $MODFILE_PATH $MODFILE_DEST
        echo "== Done."
        exit 0
        ;;
    *)
        print_error "invalid category $1."
        ;;
    esac
fi

# standard module
EB=$1
if [ ! -e $EB ]; then
    print_error "cannot find easyconfig file $1."
fi
ml easybuild

set -e
set -o pipefail
read -r PREFIX DIR < <(
    eb -D $1 | grep '\[x\]' | tail -1 | \
    sed -e 's/^.*module: //' -e 's/)$//' | \
    awk -F'|' '{print $1,$2}'
)
if [ $? -ne 0 ]; then
    print_error "possible error in module installation."
fi
PREFIX="standard/$PREFIX"
DIR="${DIR/\/./\/}"
# add '.' for hidden modulefile
if grep -q "^hidden\s*=\s*True" $EB; then
    LUA="${DIR/\///.}.lua"
else
    LUA="$DIR.lua"
fi

APP=`dirname $DIR`

BUILD_DIR=$(realpath /apps)
YYYYMM_build=$(basename $BUILD_DIR)
echo "BUILD_DIR = $BUILD_DIR"

if [ "$YYYYMM_build" = "202412_build" ]; then
    PROD_DIR=${BUILD_DIR/_build/}
else
    PROD_DIR=$(echo $BUILD_DIR | sed -e 's@weka@gpfs/tardis@' -e 's/_build//')
fi
YYYYMM=$(basename $PROD_DIR)
echo "PROD_DIR = $PROD_DIR"

SOFTWARE_PATH=$BUILD_DIR/$SOFTWARE/$PREFIX/$DIR
MODFILE_PATH="$BUILD_DIR/$MODFILE/$PREFIX/$LUA"

# may contain uppercase
APP_EB=$(cat $EB|awk '/^name/ {gsub(/\047/,""); print $3}')
EB_PATH=$BUILD_DIR/ebscripts/easybuild/easyconfigs/$APP_EB/$EB

echo "== Paths"
echo "Software source and destination:"
echo "$SOFTWARE_PATH"
echo "$PROD_DIR/$SOFTWARE/$PREFIX/$DIR"
echo 
echo "Module file source and destination:"
echo "$MODFILE_PATH"
echo "$PROD_DIR/$MODFILE/$PREFIX/`dirname $DIR`"
echo
echo "Easyconfig source and destination:"
echo "$EB_PATH"
echo "$PROD_DIR/ebscripts/easybuild/easyconfigs/$APP_EB/"
echo

# check paths of software and module file
for i in $SOFTWARE_PATH $MODFILE_PATH; do
	if [ ! -e $i ]; then
        print_error "$i not found."
    fi
done

echo
read -p "== Perform rsync now? [y/N]" realrun

if [[ ! $realrun =~ ^[Yy]$ ]]; then
	echo "== No changes performed."
	exit 0
fi

echo "== Performing rsync..."
cd $BUILD_DIR 
rsync -avR --delete $SOFTWARE/$PREFIX/$DIR $PROD_DIR && \
rsync -avR $MODFILE/$PREFIX/$LUA  $PROD_DIR && \
rsync -avR ebscripts/easybuild/easyconfigs/$APP_EB/$EB $PROD_DIR

# check default symlink
if [ -e $MODFILE/$PREFIX/$APP/default ]; then
    rsync -avR $MODFILE/$PREFIX/$APP/default $PROD_DIR
fi

echo
echo "== Done."
