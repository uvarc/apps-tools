#!/bin/bash
#
# Performs rsync from build to production
# Ruoshi Sun

function print_usage {
	echo "Usage: `basename $0` EASYCONFIG"
	echo "Usage: `basename $0` vendor NAME/VERSION"
}

function print_error {
	RED='\e[1;31m'
	NC='\e[m'
	echo -e "${RED}Error: $1${NC}"
	echo
	print_usage
	exit 1
}

NARGS=$#
if [ $NARGS -eq 0 ]; then
	print_usage
	exit 0
fi

# directory name for software and modules
SOFTWARE="software"
MODFILE="modulefiles"

# determine source and destination for /apps
APP_SOURCE=$(realpath /apps)
if [ "$(basename $APP_SOURCE)" = "202412_build" ]; then
    APP_DEST=${APP_SOURCE/_build/}
else
    if [[ "$APP_SOURCE" == *"_build" ]]; then
        APP_DEST=$(echo $APP_SOURCE | sed -e 's@weka@gpfs/tardis@' -e 's/_build//')
    else
        echo "WARNING: Syncing from YYYYMM to YYYYMM_build should only be done for special cases"
        APP_DEST="$(echo $APP_SOURCE | sed 's@gpfs/tardis@weka@')"_build
    fi
fi

for i in $APP_SOURCE $APP_DEST; do
    if [ ! -d $i ]; then
        print_error "Cannot find directory $i."
    fi
done

if [ $NARGS -eq 2 ]; then
    # Need to use realpath for vendor source and destination 
    # Do not use /apps or it will overwrite the vendor symlink
    case $1 in
    vendor)
        APP_SOURCE=$(dirname $APP_SOURCE)/$1/installation
        APP_DEST=$(dirname $APP_DEST)/$1/production
        SOFTWARE_PATH=$SOFTWARE/$2 
        MODFILE_PATH=$MODFILE/$2.lua
        ;;
    *)
        print_error "invalid category $1."
        ;;
    esac
fi

echo "Source      = $APP_SOURCE"
echo "Destination = $APP_DEST"
echo

# needed to rsync relative path names
# also ensures that easyconfig is read from $CFGS instead of $PWD
cd $APP_SOURCE 

# standard module via easyconfig
if [ $NARGS -eq 1 ]; then
    ml easybuild

    CFGS=$EASYBUILD_REPOSITORYPATH
    set -e
    set -o pipefail
    read -r EB_PATH PREFIX DIR < <(
        eb -D $1 2>/dev/null | awk '/\[x\]/ {gsub(/\)$/,""); print $3, $(NF-2), $NF}' | tail -1
    )
    if [ $? -ne 0 ]; then
        print_error "possible error in module installation."
    fi

    # e.g. openmpi/5.0.7 under gcc/14.2.0:
    # PREFIX = standard/compiler/gcc/14.2.0
    #    LUA = openmpi/5.0.7.lua
    #    DIR = openmpi/5.0.7
    #   NAME = openmpi
    PREFIX="standard/$PREFIX"
    LUA="$DIR.lua"
    # remove . from directory for hidden module
    DIR="${DIR/\/./\/}"
    NAME=$(dirname $DIR)

    SOFTWARE_PATH=$SOFTWARE/$PREFIX/$DIR
    MODFILE_PATH="$MODFILE/$PREFIX/$LUA"

    # e.g. OpenMPI-5.0.7-NVHPC-25.3.eb:
    #    CFGS = /apps/ebscripts/easybuild/easyconfigs
    # EB_PATH = $CFGS/OpenMPI/OpenMPI-5.0.7-NVHPC-25.3.eb
    #           xxxxxx->
    EB_PATH=${EB_PATH:6}
fi

echo "== Paths
  Software: $SOFTWARE_PATH
Modulefile: $MODFILE_PATH"
if [ $NARGS -eq 1 ]; then
    echo "Easyconfig: $EB_PATH"
fi
echo

# check paths
read -p "== Perform rsync now? [y/N]" realrun

if [[ ! $realrun =~ ^[Yy]$ ]]; then
	echo "== No changes performed."
	exit 0
fi

echo "== Performing rsync..."
rsync -avR --delete $SOFTWARE_PATH $APP_DEST && \
rsync -avR          $MODFILE_PATH  $APP_DEST && \
if [ $NARG -eq 1 ]; then
    rsync -avR ${CFGS:6}/$EB_PATH $APP_DEST
fi

# check default symlink
DEFAULT=$MODFILE/$PREFIX/$NAME/default 
if [ -e $DEFAULT ]; then
    rsync -avR $DEFAULT $APP_DEST
fi

echo
echo "== Done."
