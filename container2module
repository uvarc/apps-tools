#!/bin/bash
# Pull a container and install it as a module through EasyBuild
# Requirements:
#     skopeo - inspect container label without pulling
#     jq     - parse json
#
# Ruoshi Sun
# 2020-07-04

if [[ $# -ne 5 ]]; then
    echo "Usage: `basename $0` URI_prefix user app tag version"
    echo "where URI_prefix = docker|library|shub|etc."
    echo "      user       = username of repository (if empty, put \"\")"
    echo "      app        = name of repository"
    echo "      tag        = tag of repository"
    echo "      version    = version to be used on Rivanna (may be different from tag)"
    echo
    echo "The pull command is:"
    echo "singularity pull app-version.sif URI_prefix://[user/]app:tag"
    exit 1
fi

# parse input
URI_PREFIX=$1
USER=$2
APP=$3
TAG=$4
VERSION=$5

# constants
GPU=false
SINGULARITY_VERSION=3.5.2
SKOPEO_VERSION=1.1.0

HERE=`pwd`

# functions
function exit_if_error {
    echo "+ $1"
    eval $1
    if [ $? -ne 0 ]; then
        echo "Error: $2"
        exit 1
    fi
}

function print_stage {
    echo -e "\033[1;34m==> $1\033[0m"
}

# URI
[ -z "$USER" ] && URI="${URI_PREFIX}://${APP}:${TAG}" || URI="${URI_PREFIX}://${USER}/${APP}:${TAG}"

# singularity
SIF=${APP}-${VERSION}.sif
module load singularity/$SINGULARITY_VERSION easybuild

# check if source directory exists
print_stage "Checking sources"
cd $EASYBUILD_SOURCEPATH
SRCDIR=${APP::1}/${APP}
[ -d $SRCDIR ] || {
    print_stage "Creating directory $EASYBUILD_SOURCEPATH/$SRCDIR"
    mkdir -p $SRCDIR
}

# check if sif exists
cd $SRCDIR
if [ -e $SIF ]; then
    read -p "$SIF already exists. Overwrite? [y/N]" yn
    if [[ ! $yn =~ ^[Yy]$ ]]; then
        SKIP_PULL=true
    fi
    EB_FORCE=true # Module may already exist. Set "eb -f"
fi

# check if container exists and store labels
print_stage "Checking URI"
module load skopeo >/dev/null 2>&1
TMP=$(mktemp)

exit_if_error "$CONTAINERDIR/skopeo-${SKOPEO_VERSION}.sif inspect $URI >$TMP" "container $URI does not exist"

module unload skopeo

# pull container as sif
if [ "$SKIP_PULL" = true ]; then
    print_stage "Pulling container [skipped]"
else
    print_stage "Pulling container"
    exit_if_error "singularity pull $SIF $URI" "failed to pull container"
fi

module unload singularity

# parse labels
print_stage "Parsing labels"
module load jq

for label in HOMEPAGE DESCRIPTION MODULECLASS GPU; do
    eval "$label"='"`cat $TMP | jq -r \".Labels.${label,,}\"`"'
    echo $label="${!label}"
done

module unload jq

# write easyconfig
EB=${APP}-${VERSION}-singularity-${SINGULARITY_VERSION}.eb 

print_stage "Writing easyconfig $HERE/$EB"
cd $HERE

DATE=$(date +%Y-%m-%d)
EB_HEADER="# $DATE generated by container2module script (Ruoshi Sun)"

if [ "$GPU" = true ]; then
    USE_GPU="True"
    RUNCMD="%(toolchain_name)s run --nv \$CONTAINERDIR/%(name)s-%(version)s.sif"
else
    USE_GPU="False"
    RUNCMD="\$CONTAINERDIR/%(name)s-%(version)s.sif"
fi

cat >$EB <<EOF
$EB_HEADER

easyblock = 'EB_SingularityImage'

name = '$APP'
version = '$VERSION'

homepage = '$HOMEPAGE'
description = """
$DESCRIPTION
"""

toolchain = {'name': 'singularity', 'version': '$SINGULARITY_VERSION'}

sources = ['%(name)s-%(version)s.sif']

use_gpu = $USE_GPU
modloadmsg = """To run directly without copying the container:
$RUNCMD
"""

sanity_check_paths = {
    'files': ['%(name)s-%(version)s.sif'],
    'dirs': [],
}

moduleclass = '$MODULECLASS'
EOF

cat $EB
echo
echo "Inspect the above easyconfig."
read -rsn1 -p "Press any key to start EasyBuild installation"
echo

# EasyBuild installation
print_stage "EasyBuild"
module purge
module load easybuild
if [ "$EB_FORCE" = true ]; then 
    exit_if_error "eb $EB -f" "EasyBuild installation failed"
else 
    exit_if_error "eb $EB" "EasyBuild installation failed"
fi

echo
print_stage "Done!"
